(ns accumulate)
(defn accumulate [function collection]
  (let [fun function]
  (loop [coll collection
         result [] ]
    (if (empty? coll)
      result
      (recur (rest coll)
             (conj (fun (first coll)) result))))))
(accumulate (* n n) [1 2 3])
(accumulate (+ 10) [1 2 3])
exit
